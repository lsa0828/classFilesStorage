'''
#연습문제 10
튜플에 대한 설명

1. 괄호 ()로 표현한다.
fruits=('바나나', '감', '포도')

2. append()는 사용할 수 없다.

3. 첨자로 접근하는것은 리스트와 동일하다.
fruits[0]='바나나'

4. 주로 읽기 전용이지만 필요한 경우 insert()는 사용이 가능하다. -X

5. 튜플은 1차원만 가능하고 2차원 튜플은 생성할 수 없다. -X



#연습문제 11
딕셔너리에 대한 설명

1. 중괄호 {}로 표현

딕셔너리 변수={키1:값1, 키2:값2, 키2:값3}

2. append() 함수 사용할 수 없다.

fruits={'사과':1000, '바나나':3000, '포도':6000}

fruits['포도']=6000

3. 첨자로 접근하는 것은 리스트 및 튜플과 동일

4. 읽기 및 쓰기 모두 가능

fruits.get('포도') -> 6000
fruits.keys() -> 모든 키
fruits.values() -> 모든 값

5. 항목 추가 및 삭제는 가능하지만 변경은 할 수 없다. -X

fruits['포도']=8000

fruits['감']=2000
del(fruits['감'])
fruits['감']=1000



#연습문제 13
1. 세트는 튜플의 특수한 형태이다. -X

-> 세트는 키만 모아 놓은 딕셔너리의 특수한 형태
ex) animalsKeys={'개','호랑이','곰','말','닭', '고등어', '명태'}

2. 세트는 중복된 값을 허용하지 않는다.

-> 딕셔너리의 키는 중복될 수 없다.

3. [n for n in range(5)]의 결과는 [0, 1, 2, 3, 4]이다.

-> numList=[]
   for n in range(5) :
      numList.append(n)

4. zip()함수는 리스트를 압축하는 기능을 한다.

>>>numbers=[1, 2, 3]
>>>letters=['A', 'B', 'C']
>>>for pair in zip(numbers, letters) :
...  print(pair)

...
(1, 'A')
(2, 'B')
(3, 'C')

5. newList[:]=oldList는 oldList를 newList로 복사하는 효과를 갖는다. -X

-> newList=oldList[:]
'''
